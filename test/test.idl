
#include <sub/test.idl>

module Module0 {};

module Module1 {
	interface Interface0 : Interface1 {
		
	};
};

module Module2 {
	interface InterfaceA : Module1::Interface1 {
		short methodA ( in string n,
		out long t/*, inout boolean n*/);
	};
	interface InterfaceB {
		attribute long attrB;
	};
	enum State {S1, S2, S2};
	interface InterfaceC : Module1::Interface0, InterfaceA, Module2::InterfaceB {
		const boolean boolval = false;
		const long longval = 0x0A;
		const octet octetval = 0x0b;
		const long mixval = longval + octetval * 2; // will give 32
		const string concatval = "longval = " + longval; // will give "constval1 = 10"
		const long addVal = "11" + 22; // will give 1122
		const float factor = (10.0 - 6.5) * 3.91; // will give 13.685
// 		const long invalidval = "invalid";
		const long str2int = "1234"; // will give 1234
		const string int2str = 4321; // will give "4321"
		any methodC1();
		readonly attribute short shortAttr;
		void methodC2 ( in string n);
	};
};
